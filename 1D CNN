import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Conv1D, Flatten, MaxPooling1D
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.datasets import load_iris
from numpy import unique

with open('SET_BonnAC.csv', 'r') as f:
    data = np.genfromtxt(f, delimiter=',')
Snap1 = data[1:, 0:230]
Snap2 = data[1:, 230]

x, y = Snap1, Snap2
print(x.shape)

x = x.reshape(x.shape[0], x.shape[1], 1)
print(x.shape)

print(unique(y))
print(unique(y).sum())

xtrain, xtest, ytrain, ytest=train_test_split(x, y, test_size=0.3)

model = Sequential()
model.add(Conv1D(64, 2, activation="relu", input_shape=(230,1)))
model.add(Dense(16, activation="relu"))
model.add(MaxPooling1D())
model.add(Flatten())
model.add(Dense(3, activation = 'softmax'))
model.compile(loss = 'sparse_categorical_crossentropy', 
     optimizer = "adam",               
              metrics = ['accuracy'])
model.summary()
model.fit(xtrain, ytrain, batch_size=16,epochs=100, verbose=0)

acc = model.evaluate(xtrain, ytrain)
print("Loss:", acc[0], " Accuracy:", acc[1])

pred = model.predict(xtest)
pred_y = pred.argmax(axis=-1)

cm1 = confusion_matrix(ytest, pred_y)
print(cm1)
total1=sum(sum(cm1))
#####from confusion matrix calculate accuracy
accuracy1=(cm1[0,0]+cm1[1,1])/total1
print ('Accuracy : ', accuracy1)

sensitivity1 = cm1[0,0]/(cm1[0,0]+cm1[0,1])
print('Sensitivity : ', sensitivity1 )

specificity1 = cm1[1,1]/(cm1[1,0]+cm1[1,1])
print('Specificity : ', specificity1)

FPR = cm1[0,1]/(cm1[0,1]+cm1[1,1])
print('FPR : ', FPR)
ERR = (cm1[1,0]+cm1[0,1])/total1
print('ERR : ', ERR)
precision = cm1[0,0]/(cm1[0,1]+cm1[0,0])
print('precision : ', precision)
